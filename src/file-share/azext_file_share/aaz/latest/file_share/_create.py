# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "file-share create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a file share.

    :example: Create a File Share
        az file-share create --resource-group rgfileshares --resource-name fileshare --mount-name fileshare --media-tier SSD --redundancy Local --protocol NFS --provisioned-storage-gib 8 --provisioned-io-per-sec 5 --provisioned-throughput-mib-per-sec 22 --nfs-protocol-properties "{root-squash:NoRootSquash}" --public-access-properties "{allowed-subnets:[/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3]}" --public-network-access Enabled --tags "{key9647:xwokdvyoae}" --location gdsuixfhrgfbbbfjtgocmlzyuonrr
    """

    _aaz_info = {
        "version": "2025-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.fileshares/fileshares/{}", "2025-06-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.resource_name = AAZStrArg(
            options=["-n", "--name", "--resource-name"],
            help="The resource name of the file share, as seen by the administrator through Azure Resource Manager.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([a-z]|[0-9])([a-z]|[0-9]|(-(?!-))){1,61}([a-z]|[0-9])$",
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.media_tier = AAZStrArg(
            options=["--media-tier"],
            arg_group="Properties",
            help="The storage media tier of the file share.",
            enum={"SSD": "SSD"},
        )
        _args_schema.mount_name = AAZStrArg(
            options=["--mount-name"],
            arg_group="Properties",
            help="The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in their operating system.",
        )
        _args_schema.nfs_protocol_properties = AAZObjectArg(
            options=["--nfs-protocol-properties"],
            arg_group="Properties",
            help="Protocol settings specific NFS.",
        )
        _args_schema.protocol = AAZStrArg(
            options=["--protocol"],
            arg_group="Properties",
            help="The file sharing protocol for this file share.",
            enum={"NFS": "NFS"},
        )
        _args_schema.provisioned_io_per_sec = AAZIntArg(
            options=["--provisioned-io-per-sec"],
            arg_group="Properties",
            help="The provisioned IO / sec of the share.",
        )
        _args_schema.provisioned_storage_gib = AAZIntArg(
            options=["--provisioned-storage-gib"],
            arg_group="Properties",
            help="The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage.",
        )
        _args_schema.provisioned_throughput_mib_per_sec = AAZIntArg(
            options=["--provisioned-throughput-mib-per-sec"],
            arg_group="Properties",
            help="The provisioned throughput / sec of the share.",
        )
        _args_schema.public_access_properties = AAZObjectArg(
            options=["--public-access-properties"],
            arg_group="Properties",
            help="The set of properties for control public access.",
        )
        _args_schema.public_network_access = AAZStrArg(
            options=["--public-network-access"],
            arg_group="Properties",
            help="Gets or sets allow or disallow public network access to azure managed file share",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.redundancy = AAZStrArg(
            options=["--redundancy"],
            arg_group="Properties",
            help="The chosen redundancy level of the file share.",
            enum={"Local": "Local", "Zone": "Zone"},
        )

        nfs_protocol_properties = cls._args_schema.nfs_protocol_properties
        nfs_protocol_properties.root_squash = AAZStrArg(
            options=["root-squash"],
            help="Root squash defines how root users on clients are mapped to the NFS share.",
            enum={"AllSquash": "AllSquash", "NoRootSquash": "NoRootSquash", "RootSquash": "RootSquash"},
        )

        public_access_properties = cls._args_schema.public_access_properties
        public_access_properties.allowed_subnets = AAZListArg(
            options=["allowed-subnets"],
            help="The allowed set of subnets when access is restricted.",
        )

        allowed_subnets = cls._args_schema.public_access_properties.allowed_subnets
        allowed_subnets.Element = AAZStrArg()

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.FileSharesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class FileSharesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FileShares/fileShares/{resourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("mediaTier", AAZStrType, ".media_tier")
                properties.set_prop("mountName", AAZStrType, ".mount_name")
                properties.set_prop("nfsProtocolProperties", AAZObjectType, ".nfs_protocol_properties")
                properties.set_prop("protocol", AAZStrType, ".protocol")
                properties.set_prop("provisionedIOPerSec", AAZIntType, ".provisioned_io_per_sec")
                properties.set_prop("provisionedStorageGiB", AAZIntType, ".provisioned_storage_gib")
                properties.set_prop("provisionedThroughputMiBPerSec", AAZIntType, ".provisioned_throughput_mib_per_sec")
                properties.set_prop("publicAccessProperties", AAZObjectType, ".public_access_properties")
                properties.set_prop("publicNetworkAccess", AAZStrType, ".public_network_access")
                properties.set_prop("redundancy", AAZStrType, ".redundancy")

            nfs_protocol_properties = _builder.get(".properties.nfsProtocolProperties")
            if nfs_protocol_properties is not None:
                nfs_protocol_properties.set_prop("rootSquash", AAZStrType, ".root_squash")

            public_access_properties = _builder.get(".properties.publicAccessProperties")
            if public_access_properties is not None:
                public_access_properties.set_prop("allowedSubnets", AAZListType, ".allowed_subnets")

            allowed_subnets = _builder.get(".properties.publicAccessProperties.allowedSubnets")
            if allowed_subnets is not None:
                allowed_subnets.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_system_data_read(_schema_on_200_201.system_data)
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.host_name = AAZStrType(
                serialized_name="hostName",
                flags={"read_only": True},
            )
            properties.included_burst_io_per_sec = AAZIntType(
                serialized_name="includedBurstIOPerSec",
                flags={"read_only": True},
            )
            properties.max_burst_io_per_sec_credits = AAZIntType(
                serialized_name="maxBurstIOPerSecCredits",
                flags={"read_only": True},
            )
            properties.media_tier = AAZStrType(
                serialized_name="mediaTier",
            )
            properties.mount_name = AAZStrType(
                serialized_name="mountName",
            )
            properties.nfs_protocol_properties = AAZObjectType(
                serialized_name="nfsProtocolProperties",
            )
            properties.private_endpoint_connections = AAZListType(
                serialized_name="privateEndpointConnections",
                flags={"read_only": True},
            )
            properties.protocol = AAZStrType()
            properties.provisioned_io_per_sec = AAZIntType(
                serialized_name="provisionedIOPerSec",
            )
            properties.provisioned_io_per_sec_next_allowed_downgrade = AAZStrType(
                serialized_name="provisionedIOPerSecNextAllowedDowngrade",
                flags={"read_only": True},
            )
            properties.provisioned_storage_gi_b = AAZIntType(
                serialized_name="provisionedStorageGiB",
            )
            properties.provisioned_storage_next_allowed_downgrade = AAZStrType(
                serialized_name="provisionedStorageNextAllowedDowngrade",
                flags={"read_only": True},
            )
            properties.provisioned_throughput_mi_b_per_sec = AAZIntType(
                serialized_name="provisionedThroughputMiBPerSec",
            )
            properties.provisioned_throughput_next_allowed_downgrade = AAZStrType(
                serialized_name="provisionedThroughputNextAllowedDowngrade",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.public_access_properties = AAZObjectType(
                serialized_name="publicAccessProperties",
            )
            properties.public_network_access = AAZStrType(
                serialized_name="publicNetworkAccess",
            )
            properties.redundancy = AAZStrType()

            nfs_protocol_properties = cls._schema_on_200_201.properties.nfs_protocol_properties
            nfs_protocol_properties.root_squash = AAZStrType(
                serialized_name="rootSquash",
            )

            private_endpoint_connections = cls._schema_on_200_201.properties.private_endpoint_connections
            private_endpoint_connections.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.private_endpoint_connections.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_system_data_read(_element.system_data)
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties
            properties.group_ids = AAZListType(
                serialized_name="groupIds",
                flags={"read_only": True},
            )
            properties.private_endpoint = AAZObjectType(
                serialized_name="privateEndpoint",
            )
            properties.private_link_service_connection_state = AAZObjectType(
                serialized_name="privateLinkServiceConnectionState",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            group_ids = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.group_ids
            group_ids.Element = AAZStrType()

            private_endpoint = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.private_endpoint
            private_endpoint.id = AAZStrType(
                flags={"read_only": True},
            )

            private_link_service_connection_state = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.private_link_service_connection_state
            private_link_service_connection_state.actions_required = AAZStrType(
                serialized_name="actionsRequired",
            )
            private_link_service_connection_state.description = AAZStrType()
            private_link_service_connection_state.status = AAZStrType()

            public_access_properties = cls._schema_on_200_201.properties.public_access_properties
            public_access_properties.allowed_subnets = AAZListType(
                serialized_name="allowedSubnets",
            )

            allowed_subnets = cls._schema_on_200_201.properties.public_access_properties.allowed_subnets
            allowed_subnets.Element = AAZStrType()

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    _schema_system_data_read = None

    @classmethod
    def _build_schema_system_data_read(cls, _schema):
        if cls._schema_system_data_read is not None:
            _schema.created_at = cls._schema_system_data_read.created_at
            _schema.created_by = cls._schema_system_data_read.created_by
            _schema.created_by_type = cls._schema_system_data_read.created_by_type
            _schema.last_modified_at = cls._schema_system_data_read.last_modified_at
            _schema.last_modified_by = cls._schema_system_data_read.last_modified_by
            _schema.last_modified_by_type = cls._schema_system_data_read.last_modified_by_type
            return

        cls._schema_system_data_read = _schema_system_data_read = AAZObjectType(
            flags={"read_only": True}
        )

        system_data_read = _schema_system_data_read
        system_data_read.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data_read.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data_read.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data_read.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data_read.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data_read.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.created_at = cls._schema_system_data_read.created_at
        _schema.created_by = cls._schema_system_data_read.created_by
        _schema.created_by_type = cls._schema_system_data_read.created_by_type
        _schema.last_modified_at = cls._schema_system_data_read.last_modified_at
        _schema.last_modified_by = cls._schema_system_data_read.last_modified_by
        _schema.last_modified_by_type = cls._schema_system_data_read.last_modified_by_type


__all__ = ["Create"]
