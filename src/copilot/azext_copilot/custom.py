# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

import json
import os
import subprocess
from azure.cli.core._config import GLOBAL_CONFIG_DIR
from azure.cli.core._profile import Profile
from azure.cli.core.azclierror import ServiceError as aishServiceError
from knack.log import get_logger
import glob

logger = get_logger(__name__)


def handle_copilot(cmd):
    print("Welcome to Copilot for Azure CLI!")

    if not _is_aish_in_path():
        raise aishServiceError('Could not find aish in $env:PATH, '
                               'please go to https://github.com/PowerShell/ShellCopilot install shell copilot first.')

    config_file_path, title = _get_aish_json()

    aish_path = _get_aish_path()

    cmd = [
        'wt', '--window', '0', 'split-pane', '--tabColor', '#345beb', '--size', '0.4',
        '--title', 'Copilot for Azure CLI', '-NoExit', '-Command',
        # '--title', 'Copilot for Azure CLI', 'pwsh', '-NoExit', '-Command',
        aish_path, '--shell-wrapper', f'{config_file_path}'
    ]

    default_profile_guid = _get_default_profile()
    if default_profile_guid:
        index = cmd.index('--tabColor')
        cmd.insert(index + 2, '--profile')
        cmd.insert(index + 3, f'{default_profile_guid}')

    if title:
        index = cmd.index('--title')
        cmd[index + 1] = title

    try:
        subprocess.check_output(cmd)
    except subprocess.CalledProcessError as err:
        raise aishServiceError('Could not start az copilot sidebar: {} Command output: {}, '
                               'please go to https://github.com/PowerShell/ShellCopilot install shell copilot first.'
                               .format(err, err.output))


def _is_aish_in_path():
    path_env = os.environ.get("PATH", "")
    path_dirs = path_env.split(os.pathsep)

    for path_dir in path_dirs:
        exe_path = os.path.join(path_dir, 'aish.exe')
        if os.path.isfile(exe_path) and os.access(exe_path, os.X_OK):
            return True

    return False


def _get_aish_path():
    path_env = os.environ.get("PATH", "")
    path_dirs = path_env.split(os.pathsep)

    for path_dir in path_dirs:
        exe_path = os.path.join(path_dir, 'aish.exe')
        if os.path.isfile(exe_path) and os.access(exe_path, os.X_OK):
            return exe_path
    return "aish"

def _get_default_profile():
    pattern = os.path.join(os.getenv("LOCALAPPDATA"),
                           "Packages",
                           "Microsoft.WindowsTerminal_*",
                           "LocalState",
                           "settings.json")
    matching_files = glob.glob(pattern)
    windows_terminal_settings_path = matching_files[0] if matching_files else None

    default_profile_guid = ''
    if windows_terminal_settings_path:
        with open(windows_terminal_settings_path, 'r') as file:
            settings_content = json.load(file)
        default_profile_guid = settings_content.get('defaultProfile', '')

    return default_profile_guid


def _get_aish_json():
    # tenant_id, subscription_id = _get_sub_info()

    # Load existing configuration if it exists
    json_file_path = os.path.join(GLOBAL_CONFIG_DIR, 'aish.config.cli.json')
    # existing_config = {}
    # if os.path.exists(json_file_path):
    #     with open(json_file_path, 'r') as json_file:
    #         existing_config = json.load(json_file)

    # # Update only if tenant or subscription changes
    # if existing_config.get('context', {}).get('tenant') != tenant_id:
    #     existing_config['context'] = existing_config.get('context', {})
    #     existing_config['context']['tenant'] = tenant_id
    #
    # if existing_config.get('context', {}).get('subscription') != subscription_id:
    #     existing_config['context'] = existing_config.get('context', {})
    #     existing_config['context']['subscription'] = subscription_id

    # Update other fields only if they don't exist
    config = {
        "name": "az.copilot",
        "banner": "Copilot (Preview)",
        "description": "Copilot (Preview) can generate Azure CLI scripts, help you find commands and command sequences,"
                       " troubleshoot errors, and more for managing Azure resource. "
                       "AI-Generated content may be incorrect.",
        "prompt": "Copilot",
        "agent": "az-cli",
    }

    with open(json_file_path, 'w') as json_file:
        json.dump(config, json_file, indent=2)

    return json_file_path, "Copilot (Preview)"


def _get_sub_info():
    """
    Gets tenant id and subscription id from current subscription.
    """
    profile = Profile()
    sub = profile.get_subscription()
    return sub['tenantId'], sub['id']
